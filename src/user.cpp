#include "user.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <memory>
#include <cstdlib>
#include <ctime>
#include <openssl/evp.h>
#include <openssl/sha.h>
#include <cstdio>

using namespace std;

const string DATA_DIR = "data/"; // thu muc luu du lieu

// khoi tao nguoi dung
User::User(string u, string p, string f, string e, string ph, string r, string w, string oathKey, bool autoGen)
    : username(u), password(p), fullName(f), email(e), phone(ph), role(r), walletID(w), isAutoGeneratedPassword(autoGen), oathSecretKey(oathKey) {}

// chuyen byte sang chuoi hex, dung cho bam passwd
string bytesToHexString(const unsigned char* bytes, size_t len) {
    stringstream ss;
    ss << hex << setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << setw(2) << static_cast<int>(bytes[i]);
    }
    return ss.str();
}

// sinh passwd ngau nhien
string generateRandomPassword(int length) {
    const string charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    string password;
    srand(time(0) + rand());
    for (int i = 0; i < length; ++i) {
        password += charset[rand() % charset.size()];
    }
    return password;
}

// sinh khoa bi mat cho otp
string generateOATHSecretKey(int length) {
    const string base32_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
    string key;
    srand(time(0) + rand());
    for (int i = 0; i < length; ++i) {
        key += base32_chars[rand() % base32_chars.size()];
    }
    return key;
}

// bam passwd bang sha-256
string hashPassword(const string& password) {
    unsigned char hash[SHA256_DIGEST_LENGTH];
    EVP_MD_CTX* mdctx = EVP_MD_CTX_new();
    if (!mdctx) {
        cerr << "Loi: Khong the tao EVP_MD_CTX" << endl;
        return "";
    }
    if (1 != EVP_DigestInit_ex(mdctx, EVP_sha256(), NULL)) {
        cerr << "Loi: Khong the khoi tao EVP Digest" << endl;
        EVP_MD_CTX_free(mdctx);
        return "";
    }
    if (1 != EVP_DigestUpdate(mdctx, password.c_str(), password.length())) {
        cerr << "Loi: Khong the cap nhat EVP Digest" << endl;
        EVP_MD_CTX_free(mdctx);
        return "";
    }
    if (1 != EVP_DigestFinal_ex(mdctx, hash, NULL)) {
        cerr << "Loi: Khong the hoan thanh EVP Digest" << endl;
        EVP_MD_CTX_free(mdctx);
        return "";
    }
    EVP_MD_CTX_free(mdctx);
    return bytesToHexString(hash, SHA256_DIGEST_LENGTH);
}

// sinh otp (6 chu so)
string generateSimulatedOTP() {
    string otp;
    srand(time(0) + rand());
    for (int i = 0; i < 6; ++i) {
        otp += to_string(rand() % 10);
    }
    return otp;
}

// xac thuc otp
bool verifyOTP(const string& secretKey, const string& userOtp) {
    string command = "oathtool --totp -b \"" + secretKey + "\"";
    unique_ptr<FILE, decltype(&pclose)> pipe(popen(command.c_str(), "r"), pclose);
    if (!pipe) {
        cerr << "Loi: Khong the chay lenh oathtool." << endl;
        return false;
    }
    char buffer[128];
    string result;
    while (fgets(buffer, sizeof(buffer), pipe.get())) {
        result += buffer;
    }
    if (!result.empty() && result.back() == '\n') {
        result.pop_back();
    }
    return result == userOtp;
}

// luu danh sach nguoi dung vao user.txt trong ../data
void saveUsers(const vector<User>& users, const string& relativeFilename) {
    string filename = DATA_DIR + relativeFilename;
    string backupFilename = filename + ".bak";
    ofstream file(filename);
    if (!file.is_open()) {
        cerr << "Loi: Khong the mo file " << filename << " de ghi (Dam bao thu muc 'data/' ton tai)." << endl;
        return;
    }
    for (const auto& user : users) {
        file << user.username << "," << user.password << "," << user.fullName << ","
             << user.email << "," << user.phone << "," << user.role << ","
             << user.walletID << "," << (user.isAutoGeneratedPassword ? "1" : "0") << ","
             << user.oathSecretKey << "\n";
    }
    file.close();
    string backupCmd = "cp \"" + filename + "\" \"" + backupFilename + "\"";
#ifdef _WIN32
    backupCmd = "copy \"" + filename + "\" \"" + backupFilename + "\"";
#endif
    int result = system(backupCmd.c_str());
    if (result != 0) {
        cerr << "Canh bao: Khong the tao file backup cho " << filename << ". Ma loi: " << result << endl;
    }
}

// tai danh sach nguoi dung tu tep ../data/user.txt
vector<User> loadUsers(const string& relativeFilename) {
    string filename = DATA_DIR + relativeFilename;
    string backupFilename = filename + ".bak";
    vector<User> users;
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Canh bao: Khong the mo file " << filename << ". Dang thu doc tu file backup " << backupFilename << endl;
        ifstream backupFile(backupFilename);
        if (backupFile.is_open()) {
            file.swap(backupFile);
        } else {
            cerr << "Canh bao: Khong the mo ca file chinh va file backup trong 'data/'. Bat dau voi danh sach trong." << endl;
            return users;
        }
    }
    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string segment;
        vector<string> seglist;
        while (getline(ss, segment, ',')) {
            seglist.push_back(segment);
        }
        if (seglist.size() >= 9) {
            string username = seglist[0];
            string password = seglist[1];
            string fullName = seglist[2];
            string email = seglist[3];
            string phone = seglist[4];
            string role = seglist[5];
            string walletID = seglist[6];
            bool isAutoGen = (seglist[7] == "1");
            string oathSecretKey = seglist[8];
            users.emplace_back(username, password, fullName, email, phone, role, walletID, oathSecretKey, isAutoGen);
        } else {
            cerr << "Canh bao: Dong du lieu khong hop le trong users.txt: " << line << endl;
        }
    }
    file.close();
    return users;
}

// dang ky nguoi dung moi
User registerUser(vector<User>& users, bool isAdminRegistration) {
    string username, password, fullName, email, phone, role, walletID, oathSecretKey;
    bool autoGenPassword = false;

    cout << "Nhap ten dang nhap: ";
    cin >> username;
    for (const auto& user : users) {
        if (user.username == username) {
            cout << "Ten dang nhap da ton tai! Vui long chon ten khac.\n";
            return User("", "", "", "", "", "", "", "", false);
        }
    }
    if (isAdminRegistration) {
        cout << "Dang ky boi quan ly, sinh mat khau tu dong.\n";
        password = generateRandomPassword(10);
        autoGenPassword = true;
        cout << "Mat khau tu sinh: " << password << " (Yeu cau nguoi dung doi khi dang nhap lan dau)\n";
    } else {
        cout << "Nhap mat khau: ";
        cin >> password;
    }
    cout << "Nhap ho ten: ";
    cin.ignore();
    getline(cin, fullName);
    cout << "Nhap email: ";
    cin >> email;
    cout << "Nhap so dien thoai: ";
    cin >> phone;
    role = "user";
    walletID = "W_" + username + "_" + to_string(rand() % 1000);
    oathSecretKey = generateOATHSecretKey();

    cout << "\n--- Thiet lap xac thuc hai yeu to (2FA) ---" << endl;
    cout << "Vui long them khoa bi mat nay vao ung dung xac thuc cua ban (Google Authenticator, One Time Password,...):" << endl;
    cout << "Khoa bi mat (Base32): " << oathSecretKey << endl;
    cout << "** LUU Y: Day la lan duy nhat khoa nay duoc hien thi. Hay luu lai can than! **" << endl;
    cout << "--------------------------------------------" << endl;
    cout << "Nhan Enter de tiep tuc sau khi da luu khoa...";
    cin.ignore();
    cin.get();

    string hashedPassword = hashPassword(password);
    if (hashedPassword.empty()) {
        cout << "Loi nghiem trong: Khong the bam mat khau." << endl;
        return User("", "", "", "", "", "", "", "", false);
    }

    User newUser(username, hashedPassword, fullName, email, phone, role, walletID, oathSecretKey, autoGenPassword);
    users.push_back(newUser);
    cout << "Dang ky tai khoan thanh cong cho: " << username << endl;
    return newUser;
}

// dang nhap
User* login(vector<User>& users) {
    string username, password, otp;
    cout << "Nhap ten dang nhap: ";
    cin >> username;
    cout << "Nhap mat khau: ";
    cin >> password;

    string hashedPassword = hashPassword(password);
    if (hashedPassword.empty()) {
        cout << "Loi khi bam mat khau de so sanh." << endl;
        return nullptr;
    }

    for (auto& user : users) {
        if (user.username == username && user.password == hashedPassword) {
            cout << "Nhap ma OTP tu ung dung xac thuc cua ban: ";
            cin >> otp;
        }
    }
}
